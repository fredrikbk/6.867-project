pursuits books hard luck software how pursuing a killer app can be murder on the best laid plans dreaming in code by scott rosenberg crown pages &# software inventor mitch kapor is caught in a time warp his self funded project to create the ultimate organizer of personal information yours mine and everyone elses has slipped further and further behind schedule since the first lines of code were written in mr kapors most famous program the lotus spreadsheet was one of the original killer apps that lured nontechies to buy personal computers in but mr kapors new project dubbed chandler is a study in how programmers get sucked into "software time " a surreal and open ended schedule spiral where the harder you work the faster the goal recedes to make things worse the journalist who came onboard to document mr kapors innovative approach went away instead with field notes for a book on "why software is hard " scott rosenberg a cofounder of the online magazine salon com spent three years tagging along with mr kapors nonprofit team of programmers as they tried to build chandler "dreaming in code" interweaves the tale of the frustrated development crew with mr rosenbergs quest to understand why chandlers "slow motion trainwreck" seems to be the most common result of ambitious software projects why does it take so much longer than anyone plans to develop a new program why doesnt it do what we expected why why why does it still crash mr kapors vision was to go beyond microsoft outlook let people organize and share their email calendars notes contacts home movies playlists and anything else as freely and flexibly as they want eliminate the need for central servers expensive applications or trained administrators to page after midnight let me message you "lunch friday " and have your pc work out the details with my blackberry make the program affordable for novices and extensible for programmers by conventional wisdom mr kapor did everything right he started with an appealing idea he attracted star programmers who had worked at apple netscape and other silicon valley successes he embraced every accepted method of software innovation open source code peer to peer architecture cross platform standards design optimized for the end users experience rather than the computers internals his programmers kept wikis and blogs on the job al gore stuck his head in to tell the gang they were "changing the world " but as soon as the books tale begins every milestone proves to be an unreachable mirage every sub task grows to fill all time and space its as if the universe itself were expanding and chandler with it unlike the triumphant engineers of tracy kidders nerd classic "the soul of a new machine " the chandler geeks dont eventually win by devoting every waking moment to heroic labor they work nonstop to go nowhere mr kapor adheres to industry sayings like "adding more people to a late project makes it later " and when that doesnt work he brings in a new wave of fresh faces he tries instituting hard deadlines and then no deadlines his team gathers for long postmortem sessions to analyze what went wrong with the most recent round of development then plans each new schedule more thoroughly more conservatively they abandon major features just to get something built every time they solve one puzzle they find three more behind it if youre reading about this instead of living it its cruelly entertaining to watch a bunch of alpha geeks discover the limits of their genius but after a while its hard to keep watching mr rosenberg turns his head away for chapters at a time to look at the half century history of computer programming he discovers that its full of similar dead end dreams such as doug engelbarts utopian project to augment the acceleration of human learning mr engelbart is remembered instead for the computer mouse alan kay the former software star of xerox parc labored to create the smalltalk programming language for powerful tools like well chandler today mr kay laments that smalltalk remains essentially an underutilized screwdriver unlike mr kapors staff the author eventually has to cut bait and deliver his manuscript if he wants to get paid mr rosenberg leaves chandler in late as web all in your browser services from google and yahoo are making mr kapors installed desktop app seem dated if things had gone differently this would be the tale of an open source peer to peer triumph over microsofts buggy expensive monopolist outlook instead the book is hawked in publicity material as an explanation of why development of the new windows vista operating system took longer than planned "dreaming in code" indeed offers clues to what happened in redmond but only by extrapolation building software mr rosenberg explains isnt like building a bridge no matter how thorough your blueprints youll need to make drastic changes to them once youre halfway across the water and find that girders dont quite mesh the way you had planned and the riverbank has shifted as a former software engineer i enjoyed mr rosenbergs descriptions of status meetings where stanford trained alpha geeks realize each week that theyve slipped two weeks further behind but in another way that "dreaming in code" differs from "soul of a new machine " the author reveals little of what goes on in these programmers lives between meetings one chandler coder undergoes a divorce changes his name to rys and starts wearing lipstick to work its the most human moment in the book yet rys only gets a few paragraphs his co workers are described as ponytailed and pot bellied stubborn or multidisciplinary but unlike the way we get to know the castaways on "lost " we dont gradually come to appreciate each characters depth as the story progresses this is a book about process not people i grasped the long hard slog of the job thanks to mr rosenbergs clear and user friendly voice but didnt come away feeling that id made new friends as for the question of why designing software is so hard "dreaming in code" doesnt offer much of an answer beyond the harder than bridge building comparison innovative software projects are always late mr rosenberg explains and thats not about to change instead his goal seems to be to teach non programming managers not how to fix late projects but how to accept them the author reluctantly condenses what hes learned into rosenbergs law "software is easy to make except when you want it to do something new " cute but myspace and youtube went from half baked ideas to billion dollar businesses while mr rosenberg was writing his book is he saying they were hard or that they do nothing new mr boutin is a silicon valley based writer whose work appears in slate wired and valleywag 
